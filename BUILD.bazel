# Hey Emacs, this is -*- coding: utf-8; mode: bazel -*-

load("@rules-compdb//:defs.bzl", "compilation_database")

targets = [
  ## /a/$ auto-code cc-all targets-list
  ## /a/{

  # model: auto-code/models/cc-all.py
  # template: auto-code/templates/targets-list.mako

  "//packages/binary-gap/cpp20:main",
  "//packages/binary-gap/cpp20:main-perf",
  "//packages/binary-gap/cpp20:main-test-binary",
  "//packages/count-conforming-bitmasks/cpp20:force",
  "//packages/count-conforming-bitmasks/cpp20:force-test-binary",
  "//packages/count-conforming-bitmasks/cpp20:main",
  "//packages/count-conforming-bitmasks/cpp20:main-perf",
  "//packages/count-conforming-bitmasks/cpp20:main-test-binary",
  "//packages/diamond:main",
  "//packages/sparse-binary-decomposition/cpp14:main",
  "//packages/sparse-binary-decomposition/cpp14:main-all",
  "//packages/sparse-binary-decomposition/cpp14:main-all-perf",
  "//packages/sparse-binary-decomposition/cpp14:main-all-test-binary",
  "//packages/sparse-binary-decomposition/cpp14:main-perf",
  "//packages/sparse-binary-decomposition/cpp14:main-test-binary",
  "//packages/test0/cpp14:main",
  "//packages/test0/cpp14:main-perf",
  "//packages/test0/cpp14:main-test-binary",
  "//packages/test1/cpp14:main",
  "//packages/test1/cpp14:main-perf",
  "//packages/test1/cpp14:main-test-binary",
  "//packages/test2/cpp14:main",
  "//packages/test2/cpp14:main-perf",
  "//packages/test2/cpp14:main-test-binary",

  ## /a/}
]

compilation_database(
  name = "bazel-compdb",
  targets = targets,
  module_exts = ["cpp"],
)

filegroup(
  name = "cc-all-targets",
  srcs = targets + [":bazel-compdb"]
)

genrule(
  name = "cc-all",
  srcs = [
    ":cc-all-targets",
    "unbox-bazel.config.js",
  ],
  outs = ["compile_commands.json"],
  cmd = "\n".join([
    "./$(execpath tools/compdb-unbox.sh)",
    'EXECPATH=$$(dirname "$(execpath tools/compdb-unbox.sh)")',
    'readonly COMPDB_DIR=$$(realpath "$$EXECPATH/..")',
    'cp "$$COMPDB_DIR/compile_commands.json" "$(RULEDIR)"',
  ]),
  exec_tools = ["tools/compdb-unbox.sh"],
  tags = ["no-sandbox"],
)

sh_binary(
  name = "pre-build",
  srcs = ["tools/pre-build.sh"],
)

sh_binary(
  name = "auto-code",
  srcs = ["tools/auto-code.sh"],
)
